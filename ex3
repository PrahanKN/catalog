import json

# Function to convert a string from a given base to an integer
def convert_to_decimal(value, base):
    return int(value, base)

# Function to compute the constant term using Lagrange Interpolation
def lagrange_interpolation(points):
    k = len(points)  # number of points
    constant_term = 0

    for i in range(k):
        xi, yi = points[i]
        
        # Compute the Lagrange basis polynomial at x = 0
        li = 1
        for j in range(k):
            if j != i:
                xj = points[j][0]
                li *= -xj / (xi - xj)  # Evaluate l_i(0)
        
        constant_term += yi * li

    return constant_term

# Main function to parse input and calculate the secret
def main():
    # JSON input
    input_data = input().strip()
    
    # Parse the input JSON
    test_case = json.loads(input_data)
    points = []

    # Extract the number of points needed (k)
    k = test_case["keys"]["k"]

    # Extract the points from JSON, convert them to decimal based on the base
    for key, value in test_case.items():
        if key != "keys":
            base = int(value["base"])
            value_str = value["value"]
            xi = int(key)  # The share number is used as x
            yi = convert_to_decimal(value_str, base)  # Convert the value from the given base
            points.append((xi, yi))

    # We only need the first k points for interpolation
    points = points[:k]

    # Calculate the constant term (the secret)
    constant_term = lagrange_interpolation(points)

    # Output the result
    print(constant_term)

# Run the main function
if _name_ == "_main_":
    main()
