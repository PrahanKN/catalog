#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <nlohmann/json.hpp>  // Include the JSON library

using json = nlohmann::json;
using namespace std;

// Function to convert a string from a given base to an integer
int convertToDecimal(const std::string& value, int base) {
    return stoi(value, nullptr, base);  // Converts the string based on the given base
}

// Function to compute the constant term using Lagrange Interpolation
double lagrangeInterpolation(const vector<pair<int, int>>& points) {
    int k = points.size();  // number of points
    double constant_term = 0;

    for (int i = 0; i < k; ++i) {
        double xi = points[i].first;
        double yi = points[i].second;

        // Compute the Lagrange basis polynomial at x = 0
        double li = 1;
        for (int j = 0; j < k; ++j) {
            if (j != i) {
                double xj = points[j].first;
                li *= -xj / (xi - xj);  // Evaluate l_i(0)
            }
        }
        constant_term += yi * li;
    }

    return constant_term;
}

int main() {
    // Read JSON input from a file
    std::ifstream inputFile("shares.json");
    
    // Check if file exists
    if (!inputFile.is_open()) {
        std::cerr << "Error: Could not open the file!" << std::endl;
        return 1;
    }
    
    json test_case;
    inputFile >> test_case;  // Load the JSON data

    vector<pair<int, int>> points;

    // Extract the number of points needed (k)
    int k = test_case["keys"]["k"];

    // Extract the points from JSON, convert them to decimal based on the base
    for (auto& [key, value] : test_case.items()) {
        if (key != "keys") {
            int base = stoi(value["base"].get<std::string>());
            string valueStr = value["value"];
            int xi = stoi(key);  // The share number is used as x
            int yi = convertToDecimal(valueStr, base);  // Convert the value from the given base
            points.emplace_back(xi, yi);
        }
    }

    // We only need the first k points for interpolation
    if (points.size() > k) {
        points.resize(k);
    }

    // Calculate the constant term (the secret)
    double constant_term = lagrangeInterpolation(points);

    // Output the result
    std::cout << "The secret is: " << constant_term << std::endl;

    return 0;
}
